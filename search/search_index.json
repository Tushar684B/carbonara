{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to carbonarr","text":"<p>A python package to do all ARR GIS analysis.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://tushar684b.github.io/carbonarr</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"carbonarr/","title":"carbonarr module","text":""},{"location":"carbonarr/#carbonarr.carbonarr.Map","title":"<code> Map            (Map)         </code>","text":"<p>A customized map class for displaying geospatial data using ipyleaflet.</p> <p>Inherits from the ipyleaflet Map class and adds functionalities to load different layers and basemaps.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Latitude and longitude for the map's center. Defaults to [27.48, 77.3].</p> <code>[27.48, 77.3]</code> <code>zoom</code> <code>int</code> <p>Initial zoom level for the map. Defaults to 12.</p> <code>12</code> <code>**kwargs</code> <p>Additional keyword arguments passed to the ipyleaflet Map class.</p> <code>{}</code> Source code in <code>carbonarr/carbonarr.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"A customized map class for displaying geospatial data using ipyleaflet.\n\n    Inherits from the ipyleaflet Map class and adds functionalities to load different layers and basemaps.\n\n    Args:\n        center (list, optional): Latitude and longitude for the map's center. Defaults to [27.48, 77.3].\n        zoom (int, optional): Initial zoom level for the map. Defaults to 12.\n        **kwargs: Additional keyword arguments passed to the ipyleaflet Map class.\n    \"\"\"\n\n    def __init__(self, center=[27.48, 77.3], zoom=12, **kwargs):\n        \"\"\"Initializes the map with a given center and zoom level.\n\n        Args:\n            center (list, optional): Latitude and longitude for the map's center. Defaults to [27.48, 77.3].\n            zoom (int, optional): Initial zoom level for the map. Defaults to 12.\n            **kwargs: Additional keyword arguments passed to the ipyleaflet Map class.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, **kwargs):\n        \"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL template for the tile layer.\n            name (str): The name of the tile layer.\n            **kwargs: Additional keyword arguments for the TileLayer.\n        \"\"\"\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"Adds a basemap to the map.\n\n        Args:\n            name (str or ipyleaflet.TileLayer): The name of the basemap or a TileLayer object.\n        \"\"\"\n        if isinstance(name, str):\n            basemap = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(basemap, name)\n        else:\n            self.add(name)\n\n    def add_layers_control(self, position='topright'):\n        \"\"\"Adds a layers control to the map, allowing users to toggle different layers on and off.\n\n        Args:\n            position (str, optional): Position of the layers control on the map. Defaults to 'topright'.\n        \"\"\"\n        self.add(ipyleaflet.LayersControl(position=position))\n\n    def add_geojson_layer(self, filepath, name, **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map from a file.\n\n        Args:\n            filepath (str): Path to the GeoJSON file.\n            name (str): The name of the GeoJSON layer.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        with open(filepath, 'r') as f:\n            data = json.load(f)\n\n        geo_json = GeoJSON(data=data, name=name, **kwargs)\n        self.add(geo_json)\n\n    def add_shapefile_layer(self, filepath, **kwargs):\n        \"\"\"Adds a shapefile layer to the map by converting it to GeoJSON.\n\n        Args:\n            filepath (str): Path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        # Read the shapefile using geopandas\n        gdf = gpd.read_file(filepath)\n\n        # Convert the GeoDataFrame to GeoJSON format\n        data = json.loads(gdf.to_json())\n\n        # Create a GeoJSON layer and add it to the map\n        geo_json = GeoJSON(data=data, **kwargs)\n        self.add(geo_json)\n</code></pre>"},{"location":"carbonarr/#carbonarr.carbonarr.Map.__init__","title":"<code>__init__(self, center=[27.48, 77.3], zoom=12, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map with a given center and zoom level.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Latitude and longitude for the map's center. Defaults to [27.48, 77.3].</p> <code>[27.48, 77.3]</code> <code>zoom</code> <code>int</code> <p>Initial zoom level for the map. Defaults to 12.</p> <code>12</code> <code>**kwargs</code> <p>Additional keyword arguments passed to the ipyleaflet Map class.</p> <code>{}</code> Source code in <code>carbonarr/carbonarr.py</code> <pre><code>def __init__(self, center=[27.48, 77.3], zoom=12, **kwargs):\n    \"\"\"Initializes the map with a given center and zoom level.\n\n    Args:\n        center (list, optional): Latitude and longitude for the map's center. Defaults to [27.48, 77.3].\n        zoom (int, optional): Initial zoom level for the map. Defaults to 12.\n        **kwargs: Additional keyword arguments passed to the ipyleaflet Map class.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n</code></pre>"},{"location":"carbonarr/#carbonarr.carbonarr.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or ipyleaflet.TileLayer</code> <p>The name of the basemap or a TileLayer object.</p> required Source code in <code>carbonarr/carbonarr.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"Adds a basemap to the map.\n\n    Args:\n        name (str or ipyleaflet.TileLayer): The name of the basemap or a TileLayer object.\n    \"\"\"\n    if isinstance(name, str):\n        basemap = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(basemap, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"carbonarr/#carbonarr.carbonarr.Map.add_geojson_layer","title":"<code>add_geojson_layer(self, filepath, name, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map from a file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the GeoJSON file.</p> required <code>name</code> <code>str</code> <p>The name of the GeoJSON layer.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>carbonarr/carbonarr.py</code> <pre><code>def add_geojson_layer(self, filepath, name, **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map from a file.\n\n    Args:\n        filepath (str): Path to the GeoJSON file.\n        name (str): The name of the GeoJSON layer.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    with open(filepath, 'r') as f:\n        data = json.load(f)\n\n    geo_json = GeoJSON(data=data, name=name, **kwargs)\n    self.add(geo_json)\n</code></pre>"},{"location":"carbonarr/#carbonarr.carbonarr.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map, allowing users to toggle different layers on and off.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position of the layers control on the map. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>carbonarr/carbonarr.py</code> <pre><code>def add_layers_control(self, position='topright'):\n    \"\"\"Adds a layers control to the map, allowing users to toggle different layers on and off.\n\n    Args:\n        position (str, optional): Position of the layers control on the map. Defaults to 'topright'.\n    \"\"\"\n    self.add(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"carbonarr/#carbonarr.carbonarr.Map.add_shapefile_layer","title":"<code>add_shapefile_layer(self, filepath, **kwargs)</code>","text":"<p>Adds a shapefile layer to the map by converting it to GeoJSON.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>carbonarr/carbonarr.py</code> <pre><code>def add_shapefile_layer(self, filepath, **kwargs):\n    \"\"\"Adds a shapefile layer to the map by converting it to GeoJSON.\n\n    Args:\n        filepath (str): Path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    # Read the shapefile using geopandas\n    gdf = gpd.read_file(filepath)\n\n    # Convert the GeoDataFrame to GeoJSON format\n    data = json.loads(gdf.to_json())\n\n    # Create a GeoJSON layer and add it to the map\n    geo_json = GeoJSON(data=data, **kwargs)\n    self.add(geo_json)\n</code></pre>"},{"location":"carbonarr/#carbonarr.carbonarr.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL template for the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the TileLayer.</p> <code>{}</code> Source code in <code>carbonarr/carbonarr.py</code> <pre><code>def add_tile_layer(self, url, name, **kwargs):\n    \"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL template for the tile layer.\n        name (str): The name of the tile layer.\n        **kwargs: Additional keyword arguments for the TileLayer.\n    \"\"\"\n    layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#carbonarr.common.hello_world","title":"<code>hello_world(name)</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>carbonarr/common.py</code> <pre><code>def hello_world(name):\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n\n    print(\"Hello World!\"+\" \"+name)\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/tushar684b/carbonarr/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>carbonarr could always use more documentation, whether as part of the official carbonarr docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/tushar684b/carbonarr/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up carbonarr for local development.</p> <ol> <li> <p>Fork the carbonarr repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/carbonarr.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv carbonarr\n$ cd carbonarr/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 carbonarr tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/tushar684b/carbonarr/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install carbonarr, run this command in your terminal:</p> <pre><code>pip install carbonarr\n</code></pre> <p>This is the preferred method to install carbonarr, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install carbonarr from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/tushar684b/carbonarr\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use carbonarr in a project:</p> <pre><code>import carbonarr\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, Marker\n\ncenter = (52.204793, 360.121558)\n\nm = Map(center=center, zoom=15)\n\nmarker = Marker(location=center, draggable=True)\nm.add(marker)\n\ndisplay(m)\n\n# Now that the marker is on the Map, you can drag it with your mouse,\n# it will automatically update the `marker.location` attribute in Python\n\n# You can also update the marker location from Python, that will update the\n# marker location on the Map:\nmarker.location = (50, 356)\n</pre> from ipyleaflet import Map, Marker  center = (52.204793, 360.121558)  m = Map(center=center, zoom=15)  marker = Marker(location=center, draggable=True) m.add(marker)  display(m)  # Now that the marker is on the Map, you can drag it with your mouse, # it will automatically update the `marker.location` attribute in Python  # You can also update the marker location from Python, that will update the # marker location on the Map: marker.location = (50, 356) In\u00a0[2]: Copied! <pre>import ipyleaflet\nm = ipyleaflet.Map(center = (10,10),zoom = 10)\nm.scroll_wheel_zoom = True\nm\n</pre> import ipyleaflet m = ipyleaflet.Map(center = (10,10),zoom = 10) m.scroll_wheel_zoom = True m Out[2]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[3]: Copied! <pre>import carbonarr\nm = carbonarr.Map()\nm.scroll_wheel_zoom = True\nm\n</pre> import carbonarr m = carbonarr.Map() m.scroll_wheel_zoom = True m Out[3]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[1]: Copied! <pre># import json\n# import random\n\n# from ipyleaflet import Map, GeoJSON\n# from ipyleaflet import Map, LayersControl\n\n# with open('parcel.geojson', 'r') as f:\n#     data = json.load(f)\n\n# def random_color(feature):\n#     return {\n#         'color': 'black',\n#         'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),\n#     }\n\n# m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n# layer = LayersControl(position='topright')\n\n# geo_json = GeoJSON(\n#     data=data,\n#     style={\n#         'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n#     },\n#     hover_style={\n#         'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5\n#     },\n#     style_callback=random_color\n# )\n# m.add(geo_json)\n# m.scroll_wheel_zoom = True\n# m.add(layer)\n# m\n</pre> # import json # import random  # from ipyleaflet import Map, GeoJSON # from ipyleaflet import Map, LayersControl  # with open('parcel.geojson', 'r') as f: #     data = json.load(f)  # def random_color(feature): #     return { #         'color': 'black', #         'fillColor': random.choice(['red', 'yellow', 'green', 'orange']), #     }  # m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3) # layer = LayersControl(position='topright')  # geo_json = GeoJSON( #     data=data, #     style={ #         'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1 #     }, #     hover_style={ #         'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5 #     }, #     style_callback=random_color # ) # m.add(geo_json) # m.scroll_wheel_zoom = True # m.add(layer) # m In\u00a0[2]: Copied! <pre>import carbonarr\nm = carbonarr.Map()\n# m.add_basemap('OpenTopoMap')\nm.add_layers_control()\nm.add_geojson_layer(filepath='parcel.geojson',name='parcels')\n# m.add_geojson_layer('europe_110.geo.json','europe')\nm.scroll_wheel_zoom = True\nm\n</pre> import carbonarr m = carbonarr.Map() # m.add_basemap('OpenTopoMap') m.add_layers_control() m.add_geojson_layer(filepath='parcel.geojson',name='parcels') # m.add_geojson_layer('europe_110.geo.json','europe') m.scroll_wheel_zoom = True m Out[2]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[3]: Copied! <pre>import carbonarr\nm = carbonarr.Map()\nstyle = {\n    'opacity':0.8,'dashArray':'1','fillOpacity':0.1,'weight':1\n}\nhover_style = {\n    'color':'white','dashArray':'9','fillOpacity':1\n    \n}\nimport random\ndef random_color(feature):\n    return {\n        'color': 'black',\n        'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),\n    }\n\nm.add_geojson_layer('europe_110.geo.json',name = 'shapefile',style = style, hover_style = hover_style,\n    style_callback=random_color)\n\nm\n</pre> import carbonarr m = carbonarr.Map() style = {     'opacity':0.8,'dashArray':'1','fillOpacity':0.1,'weight':1 } hover_style = {     'color':'white','dashArray':'9','fillOpacity':1      } import random def random_color(feature):     return {         'color': 'black',         'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),     }  m.add_geojson_layer('europe_110.geo.json',name = 'shapefile',style = style, hover_style = hover_style,     style_callback=random_color)  m Out[3]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}